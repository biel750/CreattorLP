// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9aunZZ4t846y1592QqJ7VC
// Component: --UNrw1048
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_creattor.module.css"; // plasmic-import: 9aunZZ4t846y1592QqJ7VC/projectcss
import sty from "./PlasmicFooterCreattor.module.css"; // plasmic-import: --UNrw1048/css

export type PlasmicFooterCreattor__VariantMembers = {};

export type PlasmicFooterCreattor__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooterCreattor__VariantsArgs;
export const PlasmicFooterCreattor__VariantProps = new Array<VariantPropType>();

export type PlasmicFooterCreattor__ArgsType = {};
type ArgPropType = keyof PlasmicFooterCreattor__ArgsType;
export const PlasmicFooterCreattor__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterCreattor__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultFooterCreattorProps {
  className?: string;
}

function PlasmicFooterCreattor__RenderFunc(props: {
  variants: PlasmicFooterCreattor__VariantsArgs;
  args: PlasmicFooterCreattor__ArgsType;
  overrides: PlasmicFooterCreattor__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__x7ZXc
        )}
      >
        {"Na mídia"}
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__iA6L1
        )}
      >
        {"Veja o que estão falando da gente"}
      </div>

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <p.PlasmicLink
          className={classNames(projectcss.all, projectcss.a, sty.link__n2W2L)}
          component={Link}
          href={"https://www.instagram.com/sou.tech.br/" as const}
          platform={"nextjs"}
          target={"_blank" as const}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__u20LH)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/creattor/images/instagrampng.png",
              fullWidth: 41,
              fullHeight: 41,
              aspectRatio: undefined
            }}
          />
        </p.PlasmicLink>

        <p.PlasmicLink
          className={classNames(projectcss.all, projectcss.a, sty.link__qXrNz)}
          component={Link}
          href={"https://twitter.com/SouTechBR" as const}
          platform={"nextjs"}
          target={"_blank" as const}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__lTmvb)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/creattor/images/antDesignTwitterOutlinedpng.png",
              fullWidth: 41,
              fullHeight: 41,
              aspectRatio: undefined
            }}
          />
        </p.PlasmicLink>

        <p.PlasmicLink
          className={classNames(projectcss.all, projectcss.a, sty.link__v2GyP)}
          component={Link}
          href={"https://www.linkedin.com/company/sou-tech-br" as const}
          platform={"nextjs"}
          target={"_blank" as const}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__xhAyk)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/creattor/images/antDesignLinkedinFilledpng.png",
              fullWidth: 42,
              fullHeight: 41,
              aspectRatio: undefined
            }}
          />
        </p.PlasmicLink>
      </div>

      <p.PlasmicImg
        alt={""}
        className={classNames(sty.img__jSlMs)}
        displayHeight={"auto" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"auto" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/creattor/images/group50646Png.png",
          fullWidth: 113,
          fullHeight: 41,
          aspectRatio: undefined
        }}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__hPiR
        )}
      >
        {"© 2022 Creattor.io. All rights reserved."}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterCreattor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterCreattor__VariantsArgs;
    args?: PlasmicFooterCreattor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooterCreattor__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooterCreattor__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooterCreattor__ArgProps,
          internalVariantPropNames: PlasmicFooterCreattor__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFooterCreattor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterCreattor";
  } else {
    func.displayName = `PlasmicFooterCreattor.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterCreattor = Object.assign(
  // Top-level PlasmicFooterCreattor renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicFooterCreattor
    internalVariantProps: PlasmicFooterCreattor__VariantProps,
    internalArgProps: PlasmicFooterCreattor__ArgProps
  }
);

export default PlasmicFooterCreattor;
/* prettier-ignore-end */
