// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9aunZZ4t846y1592QqJ7VC
// Component: ltRi3su6P3_3j
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 6DMO7FOqDSSQG/component
import { ContactForm } from "../../ContactForm"; // plasmic-import: 4sYZ9_28wWgkWl/codeComponent
import Footer from "../../Footer"; // plasmic-import: 9OL-MM7ld115y/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_creattor.module.css"; // plasmic-import: 9aunZZ4t846y1592QqJ7VC/projectcss
import sty from "./PlasmicContato.module.css"; // plasmic-import: ltRi3su6P3_3j/css

export type PlasmicContato__VariantMembers = {};

export type PlasmicContato__VariantsArgs = {};
type VariantPropType = keyof PlasmicContato__VariantsArgs;
export const PlasmicContato__VariantProps = new Array<VariantPropType>();

export type PlasmicContato__ArgsType = {};
type ArgPropType = keyof PlasmicContato__ArgsType;
export const PlasmicContato__ArgProps = new Array<ArgPropType>();

export type PlasmicContato__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  text?: p.Flex<"div">;
  contactForm?: p.Flex<typeof ContactForm>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultContatoProps {}

function PlasmicContato__RenderFunc(props: {
  variants: PlasmicContato__VariantsArgs;
  args: PlasmicContato__ArgsType;
  overrides: PlasmicContato__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />

        <title key="title">{"Sou.Tech - Contato"}</title>

        <meta
          key="og:title"
          property="og:title"
          content={"Sou.Tech - Contato"}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={"Sou.Tech - Contato"}
        />

        <meta
          key="description"
          name="description"
          content={
            "Somos a Sou.Tech um novo conceito em \ntransformação digital. Especialistas em campanhas de marketing de e-commerce de alta conversão, sempre buscamos performance!"
          }
        />

        <meta
          key="og:description"
          property="og:description"
          content={
            "Somos a Sou.Tech um novo conceito em \ntransformação digital. Especialistas em campanhas de marketing de e-commerce de alta conversão, sempre buscamos performance!"
          }
        />

        <meta
          key="twitter:description"
          name="twitter:description"
          content={
            "Somos a Sou.Tech um novo conceito em \ntransformação digital. Especialistas em campanhas de marketing de e-commerce de alta conversão, sempre buscamos performance!"
          }
        />

        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/ea54075587074469a584b98f68a3a3ee.png"
          }
        />

        <meta
          key="twitter:image"
          name="twitter:image"
          content={
            "https://site-assets.plasmic.app/ea54075587074469a584b98f68a3a3ee.png"
          }
        />

        <link ref="canonical" href={"sou.tech/contato"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__rezhg)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__lc56
                )}
                component={Link}
                href={"/" as const}
                platform={"nextjs"}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {"Sobre"}
                  </span>
                </React.Fragment>
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__dmhu
                )}
                component={Link}
                href={"/contato" as const}
                platform={"nextjs"}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {"Contato"}
                  </span>
                </React.Fragment>
              </p.PlasmicLink>
            </Header>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__gpdAf)}>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Entre em contato"}
            </div>

            <ContactForm
              data-plasmic-name={"contactForm"}
              data-plasmic-override={overrides.contactForm}
              className={classNames("__wab_instance", sty.contactForm)}
            />
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "text", "contactForm", "footer"],
  header: ["header"],
  text: ["text"],
  contactForm: ["contactForm"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  text: "div";
  contactForm: typeof ContactForm;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContato__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContato__VariantsArgs;
    args?: PlasmicContato__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContato__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContato__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicContato__ArgProps,
          internalVariantPropNames: PlasmicContato__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicContato__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContato";
  } else {
    func.displayName = `PlasmicContato.${nodeName}`;
  }
  return func;
}

export const PlasmicContato = Object.assign(
  // Top-level PlasmicContato renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    text: makeNodeComponent("text"),
    contactForm: makeNodeComponent("contactForm"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicContato
    internalVariantProps: PlasmicContato__VariantProps,
    internalArgProps: PlasmicContato__ArgProps
  }
);

export default PlasmicContato;
/* prettier-ignore-end */
